#1 - Remove all null in Power Query in order to Python work properly! Also make sure to analyse zeros.
#Performance tips: https://dataveld.com/2018/11/10/5-performance-tips-for-r-and-python-scripts-in-power-bi/

  #first line
import seaborn as sns

  #last line
matplotlib.pyplot.show()

#Examples of nice visuals
#Pairplot
sns.pairplot(dataset)

#Correlation matrix
sns.heatmap(dataset.corr(),cmap='coolwarm', annot = True, linewidth =0.7)

#JointPlot Scatter + Histogram
sns.jointplot(x='data_x', y='data_y', data=dataset)

#Violion
sns.violinplot(x='data_x',y='data_y',data=dataset)

#New correlation for linear, non-linear and Category variables, PPS - Predictive Power score
#More info: https://towardsdatascience.com/rip-correlation-introducing-the-predictive-power-score-3d90808b9598
#Type to install in CMD: pip install ppscore
#To get PPS for 2 data frames : pps.score(dataset, "feature_column", "target_column")

#Plot PPS Matrix
import ppscore as pps
df_matrix = pps.matrix(dataset)
sns.heatmap(df_matrix, vmin=0, vmax=1, cmap="RdBu_r", linewidths=0.5, annot=True)

#Seaborn stylish correlation matrix
from string import ascii_letters
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

sns.set(style="white")

# Generate a large random dataset
rs = np.random.RandomState(33)
d = pd.DataFrame(data=rs.normal(size=(100, 26)),
                 columns=list(ascii_letters[26:]))

# Compute the correlation matrix
corr = d.corr()

# Generate a mask for the upper triangle
mask = np.triu(np.ones_like(corr, dtype=np.bool))

# Set up the matplotlib figure
f, ax = plt.subplots(figsize=(11, 9))

# Generate a custom diverging colormap
cmap = sns.diverging_palette(220, 10, as_cmap=True)

# Draw the heatmap with the mask and correct aspect ratio
sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5})
